---
import Page from "../layouts/Page.astro";

const allNotes = Astro.fetchContent<{ publishDate: string; title: string }>('./notes/*.md');
const sortedNotes = allNotes.sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());
---

<style>
  .welcome {
    margin-bottom: 2rem; /* TODO extract responsive spacings into untility classes */
  }
  @media (min-width: 768px) {
    .welcome {
      margin-bottom: 4rem;
    }
  }
  .leaf {
    color: var(--primary);
  }
  h2 {
    margin-bottom: 0.5rem;
    color: var(--primary);
  }
  @media (min-width: 768px) {
    h2 {
      margin-bottom: 1rem;
    }
  }
  .note {
    margin-bottom: 1rem;
  }
  @media (min-width: 768px) {
    .note {
      margin-bottom: 1.5rem;
    }
  }
</style>

<Page>
  <h1 class="sr-only">Home</h1>
  <p class="welcome text-large"><!-- TODO we could avoid this class + css mix by importing utils via sass -->
    Hello from <span id="weather">sunny</span> Berlin<span class="leaf not-sr-only"></span> My name is <a href="/now">Robin</a> and this is my website—have a look around!
  </p>
  <h2 class="small-caps">Latest notes</h2>
  <section>
    <ul role="list">
      {sortedNotes.map(p => (
        <li class="note text-large">
          <a href={p.url} class="not-small-caps">{p.title}</a>
        </li>
      ))}
    </ul>
  </section>
  <script type="text/javascript" slot="script">
    async function getWeather() {
      const date = new Date();
      const oneHourAgo = new Date(date - 1000 * 60 * 60);
      const isoDate = date.toISOString();
      const isoOneHourAgo = oneHourAgo.toISOString();
      try {
        const res = await fetch(
          `https://api.brightsky.dev/weather?tz=Europe/Berlin&wmo_station_id=10384&date=${isoOneHourAgo}&last_date=${isoDate}`
        );
        const data = await res.json();
        const weatherCode = data.weather[0].icon;
        switch (weatherCode) {
          case 'clear-night':
          case 'partly-cloudy-night':
            return "starry";
          case 'clear-day':
            return "sunny";
          case 'partly-cloudy-day':
          case 'cloudy':
            return "cloudy";
          case 'fog':
            return "foggy";
          case 'wind':
            return "windy";
          case 'rain':
            return "rainy";
          case 'sleet':
            return "sleety";
          case 'snow':
            return "snowy";
          case 'hail':
            return "haily";
          case 'thunderstorm':
            return "stormy";
          default:
            return null;
        }
        return weatherCode;
      }
      catch (error) {
        return null
      }
    }
    async function setWeather() {
      const weather = await getWeather();
      if (weather) {
        const weatherElement = document.getElementById("weather");
        weatherElement.innerText = weather;
      }
    }
    setWeather();
  </script>
</Page>
